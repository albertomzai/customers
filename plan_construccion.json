{
  "api_contract": {
    "ruta": "/api/clientes",
    "metodo": "GET, POST",
    "descripcion": "Obtiene la lista de clientes o crea un nuevo cliente.",
    "parametros_entrada_post": {
      "nombre_completo": "string",
      "empresa": "string (opcional)",
      "email": "string",
      "telefono": "string (opcional)",
      "status": "string ('Activo', 'Inactivo', 'Potencial')"
    },
    "parametros_entrada_put_delete": {
      "id": "integer"
    },
    "respuesta_get": [
      {
        "id": "integer",
        "nombre_completo": "string",
        "empresa": "string",
        "email": "string",
        "telefono": "string",
        "fecha_registro": "string (ISO 8601)",
        "status": "string"
      }
    ],
    "respuesta_post_put": {
      "id": "integer",
      "nombre_completo": "string",
      "empresa": "string",
      "email": "string",
      "telefono": "string",
      "fecha_registro": "string (ISO 8601)",
      "status": "string"
    }
  },
  "contrato_qa_e2e": {
    "tabla_clientes": "table-clients",
    "btn_agregar_cliente": "btn-add-client",
    "modal_formulario": "client-form-modal",
    "input_nombre_completo": "input-fullname",
    "input_empresa": "input-company",
    "input_email": "input-email",
    "input_telefono": "input-phone",
    "select_status": "select-status",
    "btn_guardar_cliente": "btn-save-client",
    "btn_editar_cliente": "btn-edit-client",
    "btn_eliminar_cliente": "btn-delete-client",
    "campo_busqueda": "search-input"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear un proyecto Flask con la estructura de directorios básica para el backend.",
        "Instalar y configurar Flask-SQLAlchemy para usar SQLite como base de datos.",
        "Definir el modelo 'Cliente' según el esquema proporcionado en el contexto.",
        "Implementar los endpoints RESTful: GET /api/clientes, POST /api/clientes, PUT /api/clientes/<id>, DELETE /api/clientes/<id> usando Blueprints.",
        "Agregar validación de entrada y manejo de errores para cada endpoint.",
        "Crear el fichero `requirements.txt` con las dependencias 'Flask', 'Flask-SQLAlchemy' y 'pytest'.",
        "Crear un fichero `pytest.ini` en la raíz con la configuración básica.",
        "Definir la fábrica de aplicación `create_app` dentro del paquete `backend/__init__.py`.",
        "Configurar la aplicación para servir archivos estáticos desde la ruta relativa '../frontend'.",
        "Incluir el archivo `app.py` en la raíz que importe y ejecute la aplicación desde `backend`. ",
        "Crear una carpeta `tests/` con un fichero `test_backend.py` que contenga pruebas unitarias para cada endpoint usando el cliente de prueba de Flask.",
        "Agregar un `.gitignore` que excluya carpetas como `__pycache__/`, archivos temporales y la base de datos SQLite."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'frontend/index.html' con una tabla para mostrar los clientes.",
        "Incluir un botón 'Añadir Nuevo Cliente' que abra un modal con un formulario.",
        "Implementar botones de 'Editar' y 'Eliminar' en cada fila de la tabla.",
        "Agregar un campo de búsqueda que filtre la tabla por nombre o empresa.",
        "Escribir JavaScript ES6 dentro del mismo archivo HTML para interactuar con los endpoints RESTful.",
        "Gestionar el estado de la tabla actualizando dinámicamente tras operaciones CRUD.",
        "Aplicar estilos básicos en CSS interno para una presentación limpia."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear un fichero de prueba End-to-End (`cypress/e2e/crm.cy.js`) que verifique la carga inicial de clientes, la creación, edición y eliminación de un cliente, así como el filtrado por búsqueda.",
        "Configurar Cypress para apuntar al servidor Flask en desarrollo."
      ]
    }
  ]
}